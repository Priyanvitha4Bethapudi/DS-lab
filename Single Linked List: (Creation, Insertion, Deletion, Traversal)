#include <stdio.h>
#include <stdlib.h>

struct  node{
    int data;
    struct node*link;
};

struct node* head = NULL, *cur, *temp, *temp1, *t1;

struct node* create(){
    int n;
    printf("Enter number of nodes;");
    scanf("%d",&n);
    while(n--){
        cur = (struct node*)malloc(sizeof(struct node));
        scanf("%d",&(cur ->data));
        cur->link = NULL;
        if(head == NULL){
            head = cur;
        }
        else{
            temp = head;
            while(temp -> link!=NULL){
                temp=temp->link;
            }
            temp ->link=cur;
        }
    }
    
    return head;
    printf("\n");
    
struct node*insert_begin(int ele){
    cur= (struct node*)malloc(sizeof(struct node));
    cur-> data = ele;
    cur-> link = head;
    head = cur;
    return head;
};

struct node*insert_end(int ele){
    cur= (struct node*)malloc(sizeof(struct node));
    cur-> data = ele;
    cur-> link = NULL;
    temp = head;
    while(temp-> link != NULL){
        temp= temp-> link;
    }
    temp-> link = cur;
    return head;
};

struct node*insert_pos(int pos, int ele){
    int c= 1;
    cur= (struct node*)malloc(sizeof(struct node));
    cur-> data = ele;
    temp= head;
    while(c < pos-1){
        temp= temp-> link;
        c++;
    }   
    cur-> link = temp-> link;
    temp-> link = cur;
    return head;
    printf("\n");
};

struct node*delete_begin(struct node*head){
    temp= head;
    head= temp-> link;
    printf("Deleted element is %d\n", temp-> data);
    free(temp);
    return head;
};

struct node*delete_end(struct node*head){
    temp= head;
    while(temp-> link != NULL){
        temp1= temp;
        temp= temp-> link;
    }
    temp1-> link = NULL;
    printf("Deleted element is %d\n", temp-> data);
    free(temp);
    return head;
};

struct node*delete_pos(struct node*head, int pos){
    temp= head;
    int c= 1;
    while(c < pos){
        temp1= temp;
        temp= temp-> link;
        c++;
    }
    temp1-> link = temp-> link;
    printf("Deleted element is %d", temp-> data);
    free(temp);
    return head;
    printf("\n");
};

struct node*display(){
    temp = head;
    while(temp!=NULL){
        printf("%d",temp->data);
        temp = temp->link;
    }
    printf("\n");
};

void reverse_display(struct node*head){
    if(head !=NULL){
        reverse_display(head->link);
        printf("%d", head->data);
    }
    printf("\n");
}
int searching(struct node*head, int key){
    int c = 1;
    temp=head;
    while(temp!=NULL){
        if(key == temp->data){
             return c;
        }
        temp = temp->link;
        c++;
    }
    return -1;
    printf("\n");
}

void sorting(struct node*head){
    int c;
    struct node*lptr =NULL, *t;
    do{
        c=0;
        temp=head;
        while(temp->link !=lptr){
            if(temp->data-temp->link->data)
            {
                t= temp-> data;
                temp->data =temp->link->data;
                t= temp->link->data;
                c=1;
            }
            temp=temp->link;
        }
        lptr=temp;
    }while(c);
}

int main(){
    int ch,pos,ele,key;
    while(1){
        printf("\n1-create\n2-insert_begin\n3-insert_end\n4-insert_pos\n5-delete_begin\n6-delete_end\n7-delete_pos\n8-display\n9-reverse_display\n10-searching\n11-sorting\n12-exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch(ch){
            case 1:
            head = create();
            break;
            case 2:
            scanf("%d", &ele);
            head= insert_begin(ele);
            break;
            case 3:
            scanf("%d", &ele);
            head= insert_end(ele);
            break;
            case 4:
            printf("Enter position: ");
            scanf("%d", &pos);
            printf("Enter element: ");
            scanf("%d", &ele);
            head= insert_pos(pos,ele);
            break;
            case 5:
            head= delete_begin(head);
            break;
            case 6:
            head = delete_end(head);
            break;
            case 7:
            printf("Enter position: ");
            scanf("%d", &pos);
            head= delete_pos(head,pos);
            break;
            case 8:
            display(head);
            break;
            case 9:
            reverse_display(head);
            break;
            case 10:
            scanf("%d", &key);
            pos = searching(head, key);
            if(pos == -1){
                printf("Element not found");
            }
            else{
                printf("Elememt found at position %d",pos);
            }
            break;
            case 11:
            sorting(head);
            break;
            case 12:
            exit(0);
          }        
      }
    }
    
    
    Output
    1-create
    2-insert at begin
    3-
    4-
    5-
    6-
    7-
    8-
    9-
    1-
    11-
    12
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
